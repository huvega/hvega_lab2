---
author: Hugo Vega
title: "Lab 2: Data Tidying"
format: pdf
editor: source
---

# Overview

In this assignment you will work to tidy, clean, and analyze two different datasets, the first is a small
dataset contained in a csv file called [flightdelays.csv](https://github.com/georgehagstrom/DATA607/website/assignments/labs/labData/flightdelays.csv), and the second called [MixedDrinkRecipes-Prep.csv](https://github.com/georgehagstrom/DATA607/website/assignments/labs/labData/MixedDrinkRecipes-Prep.csv).

The most important book chapters which cover the techniques you will practice here are R4DS Chapters 5 and 7. 
Also helpful are the [`tidyr` vignette on pivoting](https://tidyr.tidyverse.org/articles/pivot.html) and the
ggplot help page on the [geom_dotplot](https://ggplot2.tidyverse.org/reference/geom_dotplot.html).

Submit your completed assignment on the course brightspace page by uploading your `.qmd` file and a compiled
`pdf` or link to a compiled `html`, which you could host on your `github` or `rpubs` page as you wish. 


# Part 1: Airplane flight delays


Consider the following dataset:

|    |   | Los_Angeles| Phoenix| San_Diego| San_Francisco| Seattle|
|:-------|:-------|-----------:|-------:|---------:|-------------:|-------:|
|ALASKA  |On_Time |         497|     221|       212|           503|    1841|
|     |Delayed |          62|      12|        20|           102|     305|
|AM WEST |On_Time |         694|    4840|       383|           320|     301|
|     |Delayed |         117|     415|        65|           129|      61|



The above table describes arrival delays for two different airlines across several destinations. The numbers
correspond the the number of flights that were in either the delayed category or the on time category. 
```{r}
#| label: load-packages
#| include: false
library(tidyverse)
library(ggridges)
library(dplyr)
```
# Problems

**Problem 1:** Read the information from  `flightdelays.csv` into R, and use `tidyr` and `dplyr` to convert this data into a tidy/tall format with names and complete data for all columns. Your final data frame should have `City`, `On_Time_Flights` and `Delayed_Flights` as columns (the exact names are up to you). In addition to `pivot_longer`, `pivot_wider` and `rename`, you might find the `tidyr` function [`fill`](https://tidyr.tidyverse.org/reference/fill.html) helpful for completing this task efficiently. Although this is a small dataset that you could easily reshape by hand, you should solve this problem using 
tidyverse functions that do the work for you.
```{r}
#| label: load_Data
#| warning: false
#| include: true

flightdelay = read_csv('flightdelays.csv')
```
```{r}

# pivot longer
flightdelay1 <- flightdelay |> pivot_longer(cols = 'Los_Angeles':'Seattle', names_to = 'City', values_to = 'N_of_flights')

# rename df columns
flightdelay2 <- flightdelay1 |> rename('Airline'='...1', 'Status'='...2')

# Fill missing Airline values
flightdelay2 <- flightdelay2 %>%
  fill(Airline, .direction = "down")  # Fill downwards within each group

flightdelay2
```
```{r}

flightdelay3 <- flightdelay2 |> pivot_wider(names_from = Status, values_from = N_of_flights, values_fn = sum)
# sum the duplicate values
 flightdelay3
```
**Problem 2:** Take the data-frame that you tidied and cleaned in Problem 1 and create additional columns which contain the fraction of on-time and delayed flights at each airport. Then create a dot-plot using the `geom_dotplot` function (see the [ggplot page for dotplot]()) to visualize the difference in flight delays 
between the two airlines at each city in the dataset. What conclusions can you draw from the dotplot?

Optional: If you want to make a fancier visualization consider adding text labels containing the airline names above the dots using `geom_text` and `position = position_nudge(...)` with appropriate arguments.
```{r}

# Calculate fractions of on-time and delayed flights
flightdelay4 <- flightdelay3 %>%
  group_by(Airline, City) %>%
  mutate(fraction_on_time = On_Time / sum(On_Time, Delayed),
         fraction_delayed = Delayed / sum(On_Time, Delayed))
         
flightdelay4
```
```{r}
#| eval: false
install.packages("ggrepel")  # Install if you haven't already
```
```{r}

# Create the dot plot
ggplot(flightdelay4, aes(x = City, y = fraction_delayed, color = Airline)) + 
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5) + 
  scale_y_continuous(labels = scales::percent_format()) +  # Format y-axis as percentages
  labs(title = "Comparison of Flight Delay Fractions by Airline and City",
       x = "City", y = "Fraction of Delayed Flights") +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability

# Optional: Add text labels for airlines (requires 'ggrepel' package)

library(ggrepel)

ggplot(flightdelay4, aes(x = City, y = fraction_delayed, color = Airline, label = Airline)) + 
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5) + 
  geom_text_repel(position = position_nudge(y = 0.02),  # Adjust nudge as needed
                  size = 3) +  # Adjust text size as needed
  scale_y_continuous(labels = scales::percent_format()) + 
  labs(title = "Comparison of Flight Delay Fractions by Airline and City",
       x = "City", y = "Fraction of Delayed Flights") +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
**Part 1**
***Discussion***
The fraction of delay flight increase with the size of the airport, Phoenix has the lowest ration while San Francisco hast the highest ratio of delayed flights. However one airline has lower performance that the other in both of the ariports.


# Part 2: Mixed Drink Recipes

In the second part of this assignment we will be working with a dataset containing ingredients for different
types of mixed drinks. This dataset is untidy and messy- it is in a wide data format and contains some inconsistencies that should be fixed.

# Problems

**Problem 3** Load the mixed drink recipe dataset into R from the file `MixedDrinkRecipes-prep.csv`, which
you can download from my github page by [clicking here](https://github.com/georgehagstrom/DATA607/website/assignments/labs/labData/MixedDrinkRecipes-Prep.csv). 
The variables `ingredient1` through `ingredient6` list the ingredients of the cocktail listed in the `name` column. Notice that there are many `NA` values in the ingredient columns, indicating that most cocktails have under 6 ingredients. 
```{r}
#| label: loadData
#| warning: false
#| include: true

cocktail = read_csv('MixedDrinkRecipes-Prep.csv')

```
Tidy this dataset using `pivot_longer` to create a new data frame where each there is a row corresponding to each ingredient of all the cocktails, and an additional variable specifying the "rank" of that cocktail in
the original recipe, i.e. it should look like this:

|name            |category          | Ingredient_Rank|Ingredient          |
|:---------------|:-----------------|---------------:|:-------------------|
|Gauguin         |Cocktail Classics |               1|Light Rum           |
|Gauguin         |Cocktail Classics |               2|Passion Fruit Syrup |
|Gauguin         |Cocktail Classics |               3|Lemon Juice         |
|Gauguin         |Cocktail Classics |               4|Lime Juice          |
|Fort Lauderdale |Cocktail Classics |               1|Light Rum           |

where the data-type of `Ingredient_Rank` is an integer. Hint: Use the `parse_number()` function in mutate after your initial pivot. 
```{r}

cocktail1 <- cocktail |> pivot_longer(cols = ingredient1:ingredient6, names_to = "Ingredient_Rank", names_transform = readr::parse_number, values_to = "Ingredient", values_drop_na = TRUE)

cocktail1
```
**Problem 4:** Some of the ingredients in the ingredient list have different names, but are nearly the same thing. An example include `Lemon Juice` versus `Juice of a lemon`. Make a list of the ingredients appearing in the ingredient list ranked by how commonly they occur along with the number of occurrences, and print the first 10 elements of the list here. Then check more ingredients (I suggest looking at more ingredients and even sorting them alphabetically using `arrange(asc(ingredient)))` and see if you can spot pairs of ingredients that are similar but have different names. Use `if_else`( [click here for if_else](https://dplyr.tidyverse.org/reference/if_else.html) ) in combination with `mutate` to make it so that the pairs of ingredients you found have the same name. You don't have to find all pairs, but find at least 5 pairs of ingredients to rename. Because the purpose of this renaming is to facilitate a hypothetical future analysis, you can choose your own criteria for similarity as long as it is somewhat justifiable. 
```{r}

# Count occurrences of each ingredient
ingredient_counts <- cocktail1 %>%
  group_by(Ingredient) %>%
  summarize(Count = n()) %>%
  arrange(desc(Count))

# Print the top 10 ingredients
print(head(ingredient_counts, 10))

```
```{r}

# Sort ingredients alphabetically
sorted_ingredients <- cocktail1 %>%
  arrange(Ingredient) %>%
  distinct(Ingredient)

# Print the sorted ingredients (you'll need to visually inspect this output)
print(sorted_ingredients)

```
```{r}

# Standardize ingredient names
cocktail2 <- cocktail1 %>%
  mutate(Ingredient = if_else(Ingredient == "Lemon Juice", "Juice of a Lemon", 
                              if_else(Ingredient == "Lime Juice", "Juice of a Lime",
                                      if_else(Ingredient == "Almond milk", "Almond extract",
                                              if_else(Ingredient == "Orange Juice", "Juice of an Orange",
                                                      if_else(Ingredient == "Absithe Substitute", "Absithe",
                                                              Ingredient))))))

# Print first few rows to verify
print(head(cocktail2))

```
Notice that there are some ingredients that appear to be two or more ingredients strung together with commas. These would be candidates for more cleaning though this exercise doesn't ask you to fix them.

**Problem 5:** Some operations are easier to do on `wide` data rather than `tall` data.
Find the 10 most common pairs of ingredients occurring in the top 2 ingredients in a recipe. It is much
easier to do this with a `wide` dataset, so use `pivot_wider` to change the data so that each row contains all of the ingredients of a single cocktail, just like in the format of the original data-set. Then use `count`
on the `1` and `2` rows to determine the most common pairs (see chapter 3 for a refresher on `count`).

Note: You may be interested to read about the `widyr` package here: [widyr page](https://rdrr.io/cran/widyr/f/README.md). It is designed to solve problems like this one and uses internal pivot steps to accomplish it so that the final result is tidy. I'm actually unaware of any easy ways of solving problem 5 without pivoting to a wide dataset. 
```{r}

# Pivot the dataframe back to wide format
cocktail_wide <- cocktail2 %>%
  pivot_wider(id_cols = c(name, category),names_from = Ingredient_Rank, 
              values_from = Ingredient) 

# Count the most common pairs of ingredients in columns 1 and 2
top_ingredient_pairs <- cocktail_wide %>%
  count(`1`, `2`, sort = TRUE) %>%
  head(10)

# Print the top 10 pairs
print(top_ingredient_pairs)

```



